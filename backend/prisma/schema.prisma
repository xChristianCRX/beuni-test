generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SendStatus {
  pendente
  enviado
  entregue
  falha
  cancelado
}

model Organizacao {
  id             Int           @id @default(autoincrement())
  nome           String
  cnpj           String        @unique
  endereco       String?
  data_criacao   DateTime      @default(now())
  data_atualizacao DateTime    @updatedAt

  usuarios       Usuario[]
  departamentos  Departamento[]
  aniversariantes Aniversariante[]

  Convite Convite[]
}

model Usuario {
  id               Int          @id @default(autoincrement())
  nome             String
  email            String       @unique
  senha_hash       String
  data_criacao     DateTime     @default(now())
  data_atualizacao DateTime     @updatedAt

  organizacao      Organizacao  @relation(fields: [organizacaoId], references: [id])
  organizacaoId    Int

  convitesEnviados Convite[]    @relation("ConvitesEnviados")
}

model Departamento {
  id               Int            @id @default(autoincrement())
  nome             String
  organizacao      Organizacao    @relation(fields: [organizacaoId], references: [id])
  organizacaoId    Int
  kit              Kit?           @relation(fields: [kitId], references: [id])
  kitId            Int?
  aniversariantes  Aniversariante[]
  data_criacao     DateTime       @default(now())
  data_atualizacao DateTime       @updatedAt
}

model Kit {
  id               Int            @id @default(autoincrement())
  nome             String
  descricao        String?
  produtos         KitProduto[]
  departamentos    Departamento[]
  envios           Envio[]
  data_criacao     DateTime       @default(now())
  data_atualizacao DateTime       @updatedAt
}

model Produto {
  id               Int            @id @default(autoincrement())
  nome             String
  descricao        String?
  personalizavel   Boolean        @default(true)
  kits             KitProduto[]
  data_criacao     DateTime       @default(now())
  data_atualizacao DateTime       @updatedAt
}

model KitProduto {
  kit        Kit     @relation(fields: [kitId], references: [id])
  kitId      Int
  produto    Produto @relation(fields: [produtoId], references: [id])
  produtoId  Int
  quantidade Int     @default(1)

  @@id([kitId, produtoId])
}

model Aniversariante {
  id               Int           @id @default(autoincrement())
  nome             String
  data_nascimento  DateTime
  cep              String
  rua              String
  numero           String
  complemento      String?
  bairro           String
  cidade           String
  estado           String
  cargo            String
  tamanho_camiseta String?

  departamento     Departamento? @relation(fields: [departamentoId], references: [id])
  departamentoId   Int?
  organizacao      Organizacao   @relation(fields: [organizacaoId], references: [id])
  organizacaoId    Int

  envios           Envio[]
  data_criacao     DateTime      @default(now())
  data_atualizacao DateTime      @updatedAt
}

model Envio {
  id               Int           @id @default(autoincrement())
  aniversariante   Aniversariante @relation(fields: [aniversarianteId], references: [id])
  aniversarianteId Int
  kit              Kit           @relation(fields: [kitId], references: [id])
  kitId            Int
  status           SendStatus    @default(pendente)
  data_disparo     DateTime?
  data_entrega     DateTime?
  data_criacao     DateTime      @default(now())
  data_atualizacao DateTime      @updatedAt
}

enum ConviteStatus {
  pendente
  aceito
  cancelado
}

model Convite {
  id              Int           @id @default(autoincrement())
  emailConvidado  String
  token           String        @unique
  data_validade   DateTime
  status          ConviteStatus @default(pendente)
  data_criacao    DateTime      @default(now())

  organizacao     Organizacao   @relation(fields: [organizacaoId], references: [id])
  organizacaoId   Int

  enviadoPor      Usuario       @relation("ConvitesEnviados", fields: [enviadoPorId], references: [id])
  enviadoPorId    Int
}
